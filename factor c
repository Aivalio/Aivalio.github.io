/*File:factor.c*/
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Συνάρτηση για να ελέγξει αν ένας αριθμός είναι πρώτος
int is_prime(long long n) {
    if (n <= 1) return 0;  // Ο αριθμός πρέπει να είναι μεγαλύτερος από το 1
    if (n == 2) return 1;   // Το 2 είναι πρώτος αριθμός
    if (n % 2 == 0) return 0; // Κανένας άλλος άρτιος αριθμός δεν είναι πρώτος
    for (long long i = 3; i <= sqrt(n); i += 2) {  // Έλεγχος μόνο για περιττούς αριθμούς
        if (n % i == 0) {
            return 0;  // Αν βρούμε διαιρετή, ο αριθμός δεν είναι πρώτος
        }
    }
    return 1;  // Αν δεν βρεθούν διαιρέτες, είναι πρώτος
}

// Συνάρτηση για να παραγοντοποιήσει ένα ημιπρώτο αριθμό
void factorize(long long semiprime) {
    // Ψάχνουμε για τον πρώτο παράγοντα πρώτου αριθμού
    for (long long i = 2; i <= sqrt(semiprime); i++) {
        if (semiprime % i == 0 && is_prime(i)) {
            // Αν i είναι πρώτος και διαιρεί τον ημιπρώτο αριθμό
            long long second_factor = semiprime / i;
            // Εμφανίζουμε τους δύο πρώτους παράγοντες
            if (is_prime(second_factor)) {
                printf("Factors: %lld %lld\n", i, second_factor);
                return;
            }
        }
    }
    // Αν δεν βρούμε παράγοντες, επιστρέφουμε μήνυμα σφάλματος (πρέπει να είναι semiprime)
    printf("Error: The number is not semiprime\n");
}

int main(int argc, char *argv[]) {
    // Έλεγχος αν το πρόγραμμα εκτελείται με σωστή είσοδο
    if (argc != 2) {
        printf("Usage: ./factor <semiprime>\n");
        return 1;
    }

    // Διαβάζουμε το ημιπρώτο αριθμό
    char *endptr;
    long long semiprime = strtoll(argv[1], &endptr, 10);

    // Αν η είσοδος δεν είναι έγκυρος αριθμός ή ο αριθμός είναι εκτός των επιτρεπόμενων ορίων
    if (*endptr != '\0' || semiprime <= 1 || semiprime > pow(2, 127)) {
        printf("Error: Invalid input or out of range\n");
        return 1;
    }

    // Κλήση της συνάρτησης παραγοντοποίησης
    factorize(semiprime);

    return 0;
}
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Συνάρτηση για να ελέγξει αν ένας αριθμός είναι πρώτος
int is_prime(long long n) {
    if (n <= 1) return 0;  // Ο αριθμός πρέπει να είναι μεγαλύτερος από το 1
    if (n == 2) return 1;   // Το 2 είναι πρώτος αριθμός
    if (n % 2 == 0) return 0; // Κανένας άλλος άρτιος αριθμός δεν είναι πρώτος
    for (long long i = 3; i <= sqrt(n); i += 2) {  // Έλεγχος μόνο για περιττούς αριθμούς
        if (n % i == 0) {
            return 0;  // Αν βρούμε διαιρετή, ο αριθμός δεν είναι πρώτος
        }
    }
    return 1;  // Αν δεν βρεθούν διαιρέτες, είναι πρώτος
}

// Συνάρτηση για να παραγοντοποιήσει ένα ημιπρώτο αριθμό
void factorize(long long semiprime) {
    // Ψάχνουμε για τον πρώτο παράγοντα πρώτου αριθμού
    for (long long i = 2; i <= sqrt(semiprime); i++) {
        if (semiprime % i == 0 && is_prime(i)) {
            // Αν i είναι πρώτος και διαιρεί τον ημιπρώτο αριθμό
            long long second_factor = semiprime / i;
            // Εμφανίζουμε τους δύο πρώτους παράγοντες
            if (is_prime(second_factor)) {
                printf("Factors: %lld %lld\n", i, second_factor);
                return;
            }
        }
    }
    // Αν δεν βρούμε παράγοντες, επιστρέφουμε μήνυμα σφάλματος (πρέπει να είναι semiprime)
    printf("Error: The number is not semiprime\n");
}

int main(int argc, char *argv[]) {
    // Έλεγχος αν το πρόγραμμα εκτελείται με σωστή είσοδο
    if (argc != 2) {
        printf("Usage: ./factor <semiprime>\n");
        return 1;
    }

    // Διαβάζουμε το ημιπρώτο αριθμό
    char *endptr;
    long long semiprime = strtoll(argv[1], &endptr, 10);

    // Αν η είσοδος δεν είναι έγκυρος αριθμός ή ο αριθμός είναι εκτός των επιτρεπόμενων ορίων
    if (*endptr != '\0' || semiprime <= 1 || semiprime > pow(2, 127)) {
        printf("Error: Invalid input or out of range\n");
        return 1;
    }

    // Κλήση της συνάρτησης παραγοντοποίησης
    factorize(semiprime);

    return 0;
}
